<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.intranet.empManage.model.dao.EmpMapper">

    <resultMap id="memberResultMap" type="MemberDTO">
        <id property="mem_num" column="MEM_NUM"/>
        <result property="mem_id" column="MEM_ID"/>
        <result property="mem_pw" column="MEM_PW"/>
        <result property="mem_name" column="MEM_NAME"/>
        <result property="mem_phone" column="MEM_PHONE"/>
        <result property="mem_joinDate" column="MEM_JOINDATE"/>
        <result property="mem_birth" column="MEM_BIRTH"/>
        <result property="mem_email" column="MEM_EMAIL"/>
        <result property="mem_address" column="MEM_ADDRESS"/>
        <result property="dept_rank" column="DEPT_RANK"/>
        <result property="dept_code" column="DEPT_CODE"/>
        <result property="bef_num" column="BEF_NUM"/>

        <association property="department" resultMap="deptResultMap"/>
    </resultMap>

    <resultMap id="deptResultMap" type="DepartmentDTO">
        <id property="dept_code" column="DEPT_CODE"/>
        <result property="dept_name" column="DEPT_NAME"/>
    </resultMap>

    <resultMap id="appointmentResultMap" type="AppointmentDTO">
        <id property="no" column="PA_NO"/>
        <result property="category" column="PA_CATEGORY"/>
        <result property="date" column="PA_DATE"/>
        <result property="contents" column="PA_CONTENTS"/>
        <result property="bef_rank" column="PA_BEF_RANK"/>
        <result property="bef_name" column="PA_BEF_NAME"/>
        <result property="bef_code" column="PA_BEF_CODE"/>
        <result property="mem_num" column="MEM_NUM"/>

        <association property="dept" resultMap="deptResultMap"/>
        <association property="member" resultMap="memberResultMap"/>
     </resultMap>

    <!-- 직원 수 조회 -->
    <select id="selectEmpTotalCount" resultType="_int" parameterType="hashmap">
        SELECT COUNT(*)
          FROM MEMBER A
        <if test="searchCondition == 'dept_name'">
            JOIN DEPARTMENT B ON(A.DEPT_CODE = B.DEPT_CODE)
        </if>
        <where>
            <if test="searchCondition == 'mem_name'">
                A.MEM_NAME LIKE '%' || #{ searchValue } || '%'
            </if>
            <if test="searchCondition == 'mem_num'">
                A.MEM_NUM LIKE #{ searchValue }
            </if>
            <if test="searchCondition == 'dept_name'">
                B.DEPT_NAME LIKE '%' || #{ searchValue } || '%'
            </if>
            <if test="searchCondition == 'dept_rank'">
                A.DEPT_RANK LIKE '%' || #{ searchValue } || '%'
            </if>
        </where>
    </select>

    <!-- 직원 리스트 조회 -->
    <select id="selectEmpList" resultMap="memberResultMap">
        SELECT
               A.RNUM
             , A.MEM_NUM
             , A.MEM_NAME
             , A.DEPT_RANK
             , D.DEPT_NAME
             , A.MEM_JOINDATE
             , A.MEM_PHONE
             , A.MEM_EMAIL
             , A.MEM_ADDRESS
             , A.DEPT_CODE
        FROM (SELECT ROWNUM RNUM
                   , B.MEM_NUM
                   , B.MEM_NAME
                   , B.DEPT_RANK
                   , B.MEM_JOINDATE
                   , B.MEM_PHONE
                   , B.MEM_EMAIL
                   , B.MEM_ADDRESS
                   , B.DEPT_CODE
                FROM (SELECT
                             C.MEM_NUM
                           , C.MEM_NAME
                           , C.DEPT_RANK
                           , C.MEM_JOINDATE
                           , C.MEM_PHONE
                           , C.MEM_EMAIL
                           , C.MEM_ADDRESS
                           , C.DEPT_CODE
                        FROM MEMBER C
                        <if test="searchCondition == 'dept_name'">
                            JOIN DEPARTMENT D ON(C.DEPT_CODE = D.DEPT_CODE)
                        </if>
                        <where>
                            <if test="searchCondition == 'mem_name'">
                                C.MEM_NAME LIKE '%' || #{ searchValue } || '%'
                            </if>
                            <if test="searchCondition == 'mem_num'">
                                C.MEM_NUM LIKE #{ searchValue }
                            </if>
                            <if test="searchCondition == 'dept_name'">
                                D.DEPT_NAME LIKE '%' || #{ searchValue } || '%'
                            </if>
                            <if test="searchCondition == 'dept_rank'">
                                C.DEPT_RANK LIKE '%' || #{ searchValue } || '%'
                            </if>
                        </where>
                        ORDER BY C.MEM_NUM ASC
                     )B
                    <![CDATA[
                        WHERE ROWNUM <= #{ endRow }
                    ]]>
             )A
             LEFT JOIN DEPARTMENT D ON(A.DEPT_CODE = D.DEPT_CODE)
            WHERE A.RNUM >= #{ startRow }
            ORDER BY 1 ASC
    </select>

    <!-- 인사 발령 등록 멤버 값 받아오기 ajax | 받아올 값 - 사원번호, 직원명, 발령 전 직급(현재직급), 발령 전 부서(현재부서)) -->
    <select id="getMemberName" resultMap="memberResultMap" parameterType="_int">
        SELECT
               A.MEM_NAME
             , A.MEM_NUM
             , A.DEPT_RANK
             , A.DEPT_CODE
             , B.DEPT_NAME
          FROM MEMBER A
          LEFT JOIN DEPARTMENT B ON(A.DEPT_CODE = B.DEPT_CODE)
         WHERE MEM_NUM = #{ mem_num }
    </select>

    <!-- 인사 발령 테이블 정보 insert용 쿼리문 -->
    <insert id="appointmentRegist">
        INSERT
          INTO PA_PERSONNER_APPOINTMENT
        (
          PA_NO
        , PA_CATEGORY
        , PA_DATE
        , PA_CONTENTS
        , PA_BEF_RANK
        , PA_BEF_NAME
        , PA_BEF_CODE
        , MEM_NUM
        )
        VALUES
        (
          SEQ_APPOINTMENT.NEXTVAL
        , #{ category }
        , #{ date }
        , #{ contents }
        , #{ bef_rank }
        , #{ bef_name }
        , #{ bef_code }
        , #{ mem_num }
        )
    </insert>

    <!-- 멤버 테이블에 인사 발령 정보로 update 하는 메소드 -->
    <update id="appointmentUpdate">
        UPDATE MEMBER
           SET DEPT_RANK = #{ dept_rank }
             , DEPT_CODE = #{ dept_code }
         WHERE MEM_NUM = #{ mem_num }
    </update>

    <!-- 인사 발령 수 조회 -->
    <select id="selectHrListTotalCount" resultType="_int" parameterType="hashmap">
        SELECT COUNT(*)
          FROM PA_PERSONNER_APPOINTMENT A
          <if test="searchName != null and searchName != ''">
            JOIN MEMBER B ON(A.MEM_NUM = B.MEM_NUM)
          </if>
        <where>
            <if test="searchCategory == 'promotion'">
                A.PA_CATEGORY LIKE '승진'
            </if>
            <if test="searchCategory == 'move'">
                A.PA_CATEGORY LIKE '부서이동'
            </if>
            <if test="searchName != null and searchName != ''">
                AND B.MEM_NAME LIKE '%' || #{ searchName } || '%'
            </if>
        </where>
    </select>

    <!-- 인사 발령 리스트 조회 -->
    <select id="selectHrList" resultMap="appointmentResultMap">
        SELECT A.RNUM
             , A.PA_NO
             , A.PA_CATEGORY
             , A.PA_DATE
             , A.MEM_NUM
             , A.PA_BEF_RANK
             , A.PA_BEF_NAME
             , A.PA_BEF_CODE
             , A.PA_CONTENTS
             , D.MEM_NAME
             , D.DEPT_RANK
             , D.DEPT_CODE
             , E.DEPT_NAME
        FROM ( SELECT ROWNUM RNUM
                    , B.PA_NO
                    , B.PA_CATEGORY
                    , B.PA_DATE
                    , B.MEM_NUM
                    , B.PA_BEF_RANK
                    , B.PA_BEF_NAME
                    , B.PA_BEF_CODE
                    , B.PA_CONTENTS
               FROM (SELECT
                               C.PA_NO
                             , C.PA_CATEGORY
                             , C.PA_DATE
                             , C.MEM_NUM
                             , C.PA_BEF_RANK
                             , C.PA_BEF_NAME
                             , C.PA_BEF_CODE
                             , C.PA_CONTENTS
                     FROM PA_PERSONNER_APPOINTMENT C
                    <if test="searchName != null and searchName != ''">
                        JOIN MEMBER D ON(C.MEM_NUM = D.MEM_NUM)
                    </if>
                    <where>
                        <if test="searchCategory == 'promotion'">
                            C.PA_CATEGORY LIKE '승진'
                        </if>
                        <if test="searchCategory == 'move'">
                            C.PA_CATEGORY LIKE '부서이동'
                        </if>
                        <if test="searchName != null and searchName != ''">
                            AND D.MEM_NAME LIKE '%' || #{ searchName } || '%'
                        </if>
                    </where>
                     ORDER BY C.PA_NO DESC
                     ) B
                     <![CDATA[
                        WHERE ROWNUM <= #{ selectCriteria.endRow }
                     ]]>
             ) A
             LEFT JOIN MEMBER D ON(A.MEM_NUM = D.MEM_NUM)
             LEFT JOIN DEPARTMENT E ON(D.DEPT_CODE = E.DEPT_CODE)
            WHERE A.RNUM >= #{ selectCriteria.startRow }
            ORDER BY 1 ASC
    </select>

    <!-- 인사 발령 삭제(값 되돌리기) -->
    <update id="updateMember">
        UPDATE MEMBER
        SET DEPT_RANK = #{ dept_rank }
          , DEPT_CODE = #{ dept_code }
        WHERE MEM_NUM = #{ mem_num }
    </update>

    <!-- 인사 발령 삭제(테이블 DB 삭제) -->
    <delete id="hrDelete">
        DELETE FROM PA_PERSONNER_APPOINTMENT
        WHERE PA_NO = #{ no }
    </delete>

    <!-- 직원 정보 상세 조회 -->
    <select id="selectMemberDetail" parameterType="_int" resultMap="memberResultMap">
        SELECT
               A.MEM_NUM
             , A.MEM_NAME
             , A.MEM_PHONE
             , A.MEM_EMAIL
             , A.MEM_BIRTH
             , B.DEPT_NAME
             , A.DEPT_CODE
             , A.DEPT_RANK
             , A.MEM_JOINDATE
          FROM MEMBER A
          LEFT JOIN DEPARTMENT B ON (A.DEPT_CODE = B.DEPT_CODE)
         WHERE A.MEM_NUM = #{ no }
    </select>

    <!-- 직원 정보 수정(관리자) -->
    <update id="empUpdate">
        UPDATE MEMBER
           SET MEM_JOINDATE = #{ mem_joinDate }
             , DEPT_CODE = #{ dept_code }
         WHERE MEM_NUM = #{ mem_num }
    </update>

</mapper>